//генерация схемы для призмы под js
generator client {
    provider = "prisma-client-js"
}

//обьяснение с какой db работает призма
datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//создание таблицы юзера
model User {
    //при создание id это число Int уникальное@default и его id будет увеличиваться на 1 autoincrement()
    id Int @id @default(autoincrement())

    fullName String
    // @unique уникальный email
    email    String @unique
    password String

    cart Cart[]

    //когда был создан пользователь и конкретное время 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//модель продукта
model Product {
    id       Int    @id @default(autoincrement())
    name     String
    imageUrl String

    //подтверждение связи @relation(fields: [categoryId], references: [id] и цепляемся в id категории
    category   Category @relation(fields: [categoryId], references: [id])
    //привязываемся в id категории 
    categoryId Int

    //связь с ингредиентами 
    ingredient Ingredient[]

    items ProductItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id        Int  @id @default(autoincrement())
    price     Int
    //? опциональное свойство
    size      Int?
    pizzaType Int?

    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    cartItem  CartItem[]
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    //созданите связи
    products Product[]
}

model Ingredient {
    id Int @id @default(autoincrement())

    product Product[]
    cartItem  CartItem[]

    name     String
    price    Int
    imageUrl String

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    toket String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cartItem CartItem[]
}

model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [CartId], references: [id])
    CartId Int

    ingredients Ingredient[]
  
    quantity Int


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order{
    id Int @id @default(autoincrement())
}
